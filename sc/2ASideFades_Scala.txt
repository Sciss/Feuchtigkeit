so.port=55555

val buf = Buffer.cue( s, "/Users/hhrutz/Desktop/Feuchtigkeit/audio_work/2ASideBlossMMRsmpHP.aif" )

SynthDef.recv( s, "fade6" ) {
    val disk = DiskIn.ar( 1, "buf".ir )
    val freq = XLine.kr( "start".ir( 1 ), "stop".ir( 11025.0/4 ), "dur".ir( 60 ), doneAction = freeSelf )
    val dust = Lag.ar( Decay.ar( Dust.ar( freq ), "lag".kr( 0.05 )), 0.01 ).min( 1 )
    val flt  = disk * dust
    Out.ar( "bus".kr( 0 ), flt * "amp".kr( 1 ))
}
SynthDef.recv( s, "rec" ) {
    val disk = DiskOut.ar( "buf".ir, In.ar( "bus".kr( 0 )))
}

val recBuf = Buffer.alloc( s, 32768 )
recBuf.write( "/Users/hhrutz/Desktop/rec11.aif", numFrames = 0, leaveOpen = true )
val recSynth = Synth( s )
val playSynth = Synth( s )

s ! OSCBundle(
   playSynth.newMsg( "fade6", s, Seq( "buf" -> buf.id )),
   recSynth.newMsg( "rec", playSynth, Seq( "buf" -> recBuf.id ), addAfter )
)

recSynth.free
recBuf.close; recBuf.free; buf.close; buf.free


// :: //

val path = "/Users/hhrutz/Desktop/Feuchtigkeit/audio_work/2ASideBlossMMRsmpHP.aif"
val spec = AudioFile.readSpec( path )
val buf = Buffer.cue( s, path, startFrame = (spec.numFrames - 60 * spec.sampleRate).toInt )
val recBuf = Buffer.alloc( s, 32768 )
recBuf.write( "/Users/hhrutz/Desktop/rec12.aif", numFrames = 0, leaveOpen = true )
val recSynth = Synth( s )
val playSynth = Synth( s )

s ! OSCBundle(
   playSynth.newMsg( "fade6", s, Seq( "start" -> (11025.0/4), "stop" -> 1, "buf" -> buf.id )),
   recSynth.newMsg( "rec", playSynth, Seq( "buf" -> recBuf.id ), addAfter )
)

recSynth.free
recBuf.close; recBuf.free; buf.close; buf.free
